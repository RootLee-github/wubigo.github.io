<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NETWORK on 为人民服务</title>
    <link>https://wubigo.com/tags/network/</link>
    <description>Recent content in NETWORK on 为人民服务</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux network</title>
      <link>https://wubigo.com/post/2018-11-23-linuxnetwork/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wubigo.com/post/2018-11-23-linuxnetwork/</guid>
      <description>https://events.static.linuxfound.org/sites/events/files/slides/2016%20-%20Linux%20Networking%20explained_0.pdf</description>
    </item>
    
    <item>
      <title>K8S CNI</title>
      <link>https://wubigo.com/post/k8s-cni/</link>
      <pubDate>Fri, 24 Feb 2017 16:18:43 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-cni/</guid>
      <description>CNI as the Kubernetes plugin model, There will be some unfortunate side-effects
Most of them are relatively minor (for example, docker inspect will not show an IP address), but some are significant. In particular, containers started by docker run might not be able to communicate with containers started by Kubernetes, and network integrators will have to provide CNI drivers if they want to fully integrate with Kubernetes
CNI was created as a minimal specification, built alongside a number of network vendor engineers to be a simple contract between the container runtime and network plugins.</description>
    </item>
    
  </channel>
</rss>