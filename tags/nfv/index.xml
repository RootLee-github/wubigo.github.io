<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NFV on NgAPP</title>
    <link>https://wubigo.com/tags/nfv/</link>
    <description>Recent content in NFV on NgAPP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jul 2017 08:36:18 +0800</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/nfv/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux Bridge</title>
      <link>https://wubigo.com/post/linux-bridge/</link>
      <pubDate>Fri, 28 Jul 2017 08:36:18 +0800</pubDate>
      
      <guid>https://wubigo.com/post/linux-bridge/</guid>
      <description>Some things worth noting in br_add_if:
 Only ethernet like devices can be added to bridge, as bridge is a layer 2 device. Bridges cannot be added to a bridge. New interface is set to promiscuous mode: dev_set_promiscuity(dev, 1)  https://goyalankit.com/blog/linux-bridge</description>
    </item>
    
    <item>
      <title>Kernel Bypass Networking</title>
      <link>https://wubigo.com/post/kernel-bypass-networking/</link>
      <pubDate>Thu, 29 Dec 2016 10:15:59 +0800</pubDate>
      
      <guid>https://wubigo.com/post/kernel-bypass-networking/</guid>
      <description>RDMA (Remote Direct Memory Access), TOE (TCP Offload Engine), and OpenOnload. More recently, DPDK (Data Plane Development Kit) has been used in some applications to bypass the kernel, and then there are new emerging initiatives such as FD.io (Fast Data Input Output) based on VPP (Vector Packet Processing). More will likely emerge in the future.
Technologies like RDMA and TOE create a parallel stack in the kernel and solve the first problem (namely, the &amp;ldquo;kernel is too slow&amp;rdquo;) while OpenOnload, DPDK and FD.</description>
    </item>
    
  </channel>
</rss>