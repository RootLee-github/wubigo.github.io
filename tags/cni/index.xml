<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CNI on 为人民服务</title>
    <link>https://wubigo.com/tags/cni/</link>
    <description>Recent content in CNI on 为人民服务</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/cni/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Choosing a CNI Network Provider for Kubernetes</title>
      <link>https://wubigo.com/post/2018-11-22-cninetworkproviderforkubernetes/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wubigo.com/post/2018-11-22-cninetworkproviderforkubernetes/</guid>
      <description>The Container Network Interface (CNI) is a library definition, and a set of tools under the umbrella of the Cloud Native Computing Foundation project. For more information visit their GitHub project. Kubernetes uses CNI as an interface between network providers and Kubernetes networking.
Why Use CNI Kubernetes default networking provider, kubenet, is a simple network plugin that works with various cloud providers. Kubenet is a very basic network provider, and basic is good, but does not have very many features.</description>
    </item>
    
    <item>
      <title>K8S CNI</title>
      <link>https://wubigo.com/post/k8s-cni/</link>
      <pubDate>Fri, 24 Feb 2017 16:18:43 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-cni/</guid>
      <description>CNI as the Kubernetes plugin model, There will be some unfortunate side-effects
Most of them are relatively minor (for example, docker inspect will not show an IP address), but some are significant. In particular, containers started by docker run might not be able to communicate with containers started by Kubernetes, and network integrators will have to provide CNI drivers if they want to fully integrate with Kubernetes
CNI was created as a minimal specification, built alongside a number of network vendor engineers to be a simple contract between the container runtime and network plugins.</description>
    </item>
    
  </channel>
</rss>