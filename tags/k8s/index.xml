<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>K8S on 为人民服务</title>
    <link>https://wubigo.com/tags/k8s/</link>
    <description>Recent content in K8S on 为人民服务</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Feb 2019 11:38:27 +0800</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kubeamd cheat sheet</title>
      <link>https://wubigo.com/post/kubeamd-cheat-sheet/</link>
      <pubDate>Mon, 11 Feb 2019 11:38:27 +0800</pubDate>
      
      <guid>https://wubigo.com/post/kubeamd-cheat-sheet/</guid>
      <description>version notes
some only works on 1.13
kubeadm version: &amp;amp;version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;13&amp;quot;, GitVersion:&amp;quot;v1.13.3&amp;quot;, GitCommit:&amp;quot;721bfa751924da8d1680787490c54b9179b1fed0&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2019-02-16T15:29:34Z&amp;quot;, GoVersion:&amp;quot;go1.11.5&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;linux/amd64&amp;quot;}  Starting with Kubernetes 1.12, the K8S.gcr.io/kube-${ARCH}, K8S.gcr.io/etcd and K8S.gcr.io/pause images don’t require an -${ARCH} suffix
 get all Pending pods  kubectl get pods --field-selector=status.phase=Pending   images list  kubeadm config images list -v 4 I0217 07:28:13.305268 14495 interface.go:384] Looking for default routes with IPv4 addresses I0217 07:28:13.307275 14495 interface.</description>
    </item>
    
    <item>
      <title>MicroK8S</title>
      <link>https://wubigo.com/post/2018-11-24-microk8s/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wubigo.com/post/2018-11-24-microk8s/</guid>
      <description>Normally, ${SNAP_DATA} points to /var/snap/microK8S/current. snap.microK8S.daemon-docker, is the docker daemon started using the arguments in ${SNAP_DATA}/args/dockerd
$snap start microK8S $microK8S.docker pull registry.cn-beijing.aliyuncs.com/google_containers/pause:3.1 $microK8S.docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 K8S.gcr.io/pause:3.1  for resource under namespace kube-system all-namespaces don&amp;rsquo;t include kube-system
$microK8S.kubectl describe po calico-node-4sq5r --namespace=kube-system  https://events.static.linuxfound.org/sites/events/files/slides/2016%20-%20Linux%20Networking%20explained_0.pdf</description>
    </item>
    
    <item>
      <title>Choosing a CNI Network Provider for Kubernetes</title>
      <link>https://wubigo.com/post/2018-11-22-cninetworkproviderforkubernetes/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wubigo.com/post/2018-11-22-cninetworkproviderforkubernetes/</guid>
      <description>The Container Network Interface (CNI) is a library definition, and a set of tools under the umbrella of the Cloud Native Computing Foundation project. For more information visit their GitHub project. Kubernetes uses CNI as an interface between network providers and Kubernetes networking.
Why Use CNI Kubernetes default networking provider, kubenet, is a simple network plugin that works with various cloud providers. Kubenet is a very basic network provider, and basic is good, but does not have very many features.</description>
    </item>
    
    <item>
      <title>K8S CSI</title>
      <link>https://wubigo.com/post/k8s-csi/</link>
      <pubDate>Sat, 24 Feb 2018 06:55:53 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-csi/</guid>
      <description>PersistentVolume A PersistentVolume (PV) is a piece of storage in the cluster that has been manually provisioned by an administrator, or dynamically provisioned by Kubernetes using a StorageClass. Many cluster environments have a default StorageClass installed. When a StorageClass is not specified in the PersistentVolumeClaim, the cluster’s default StorageClass is used instead
Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet</description>
    </item>
    
    <item>
      <title>kubectl cheat sheet</title>
      <link>https://wubigo.com/post/2018-01-11-kubectlcheatsheet/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wubigo.com/post/2018-01-11-kubectlcheatsheet/</guid>
      <description>enable RBAC  kube-apiserver - --authorization-mode=RBAC  User CRUD openssl genrsa -out bigo.key 2048 openssl req -new -key bigo.key -out bigo.csr -subj &amp;quot;/CN=wubigo/O=bigo LLC&amp;quot; sudo openssl x509 -req -in bigo.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out bigo.crt -days 500 kubectl config set-credentials bigo --client-certificate=./bigo.crt --client-key=./bigo.key kubectl config set-context bigo-context --cluster=kubernetes --namespace=bigo-NS --user=bigo kubectl config get-contexts ... CURRENT NAME CLUSTER AUTHINFO NAMESPACE bigo-context kubernetes bigo bigo * kubernetes-admin@kubernetes kubernetes kubernetes-admin .</description>
    </item>
    
    <item>
      <title>K8S notes</title>
      <link>https://wubigo.com/post/2017-07-13-k8snotes/</link>
      <pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wubigo.com/post/2017-07-13-k8snotes/</guid>
      <description>Creating sample user  Create Service Account  dashboard-adminuser.yaml
apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kube-system   Create ClusterRoleBinding  asumming that cluster-admin exists(provisioned by kubeadmin or kops)
adminuser-bind-clusteramdin.yaml
apiVersion: rbac.authorization.K8S.io/v1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.K8S.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kube-system  kubectl apply -f dashboard-adminuser.yaml   login with Bearer Token  kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &#39;{print $1}&#39;)  multi-tenant K8S clusters at network-level:  Namespaces Ingress rules allow/deny and ingress/egress Network Policies Network-aware Zones  Architect a multi-tenant system with kubernetes I don&amp;rsquo;t think there is one document out there really summaries everything.</description>
    </item>
    
    <item>
      <title>K8S CNI</title>
      <link>https://wubigo.com/post/k8s-cni/</link>
      <pubDate>Fri, 24 Feb 2017 16:18:43 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-cni/</guid>
      <description>CNI as the Kubernetes plugin model, There will be some unfortunate side-effects
Most of them are relatively minor (for example, docker inspect will not show an IP address), but some are significant. In particular, containers started by docker run might not be able to communicate with containers started by Kubernetes, and network integrators will have to provide CNI drivers if they want to fully integrate with Kubernetes
CNI was created as a minimal specification, built alongside a number of network vendor engineers to be a simple contract between the container runtime and network plugins.</description>
    </item>
    
    <item>
      <title>K8S Monitor</title>
      <link>https://wubigo.com/post/k8s-monitor/</link>
      <pubDate>Thu, 23 Feb 2017 20:28:40 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-monitor/</guid>
      <description> setup prometheus  prepare pv for prometheus  https://wubigo.com/post/2018-01-11-kubectlcheatsheet/#pvc&amp;ndash;using-local-pv
 install  helm install --name prometheus1 stable/prometheus --set server.persistentVolume.storageClass=local-hdd,alertmanager.enabled=false  </description>
    </item>
    
    <item>
      <title>K8S网络基础</title>
      <link>https://wubigo.com/post/k8s-network-basic/</link>
      <pubDate>Wed, 24 Feb 2016 19:39:03 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-network-basic/</guid>
      <description>K8S网络基础
K8S是自动化部署和监控容器的容器编排和管理工具。各大云厂商和应用开发平台都提供基于K8S的容器服务。 如果觉得K8S托管服务不容易上手或者和本公司的业务场景不匹配，现在也有很多工具帮助搭建K8S运行环境。
 Minikube kops kubeadm  如果你想搭建一个测试环境，请参考
 从K8S源代码构建容器集群 一个脚步部署K8S  Kubernetes主要构件:
 主节点： 主要的功能包括管理工作节点集群，服务部署，服务发现，工作调度，负载均衡等。 工作节点： 应用负载执行单元。 服务规范： 无状态服务，有状态服务，守护进程服务，定时任务等。   https://neuvector.com/network-security/kubernetes-networking/</description>
    </item>
    
    <item>
      <title>K8S local development setup from source code</title>
      <link>https://wubigo.com/post/2016-02-03-k8s-local-development-setup/</link>
      <pubDate>Wed, 03 Feb 2016 11:38:27 +0800</pubDate>
      
      <guid>https://wubigo.com/post/2016-02-03-k8s-local-development-setup/</guid>
      <description>Main external dependencies  go docker cri cni  external-dependencies
KUBEADM IS CURRENTLY IN BETA
kubeadm maturity build K8S  docker v17.03  sudo apt-get install docker-ce=17.03.3~ce-0~ubuntu-xenial docker pull mirrorgooglecontainers/kube-apiserver-amd64:v1.11.7 docker tag mirrorgooglecontainers/kube-apiserver-amd64:v1.11.7 K8S.gcr.io/kube-apiserver-amd64:v1.11.7 docker pull mirrorgooglecontainers/kube-controller-manager-amd64:v1.11.7 docker tag mirrorgooglecontainers/kube-controller-manager-amd64:v1.11.7 K8S.gcr.io/kube-controller-manager-amd64:v1.11.7 docker pull mirrorgooglecontainers/kube-scheduler-amd64:v1.11.7 docker tag mirrorgooglecontainers/kube-scheduler-amd64:v1.11.7 K8S.gcr.io/kube-scheduler-amd64:v1.11.7 docker pull mirrorgooglecontainers/kube-proxy-amd64:v1.11.7 docker tag mirrorgooglecontainers/kube-proxy-amd64:v1.11.7 K8S.gcr.io/kube-proxy-amd64:v1.11.7 docker pull mirrorgooglecontainers/pause:3.1 docker tag mirrorgooglecontainers/pause:3.1 K8S.gcr.io/pause:3.1 docker pull mirrorgooglecontainers/etcd-amd64:3.2.18 docker tag mirrorgooglecontainers/etcd-amd64:3.2.18 K8S.gcr.io/etcd-amd64:3.2.18 docker pull coredns/coredns:1.</description>
    </item>
    
  </channel>
</rss>