<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFTCORE on SOFTCORE</title>
    <link>https://wubigo.com/</link>
    <description>Recent content in SOFTCORE on SOFTCORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Sep 2019 07:48:37 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>虚拟机 -&gt; 容器 -&gt; 函数计算</title>
      <link>https://wubigo.com/post/from-vm-to-container-to-serverless/</link>
      <pubDate>Thu, 26 Sep 2019 07:48:37 +0800</pubDate>
      
      <guid>https://wubigo.com/post/from-vm-to-container-to-serverless/</guid>
      <description>

&lt;p&gt;昨天看到AWS &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2019/08/aws-step-function-adds-support-for-nested-workflows/&#34; target=&#34;_blank&#34;&gt;STEP FUNCTIONS支持嵌套的工作流&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;，当时就被震惊了。 AWS早些年推出SWF框架提供工作流服务，&lt;/p&gt;

&lt;p&gt;后来工作流服务就没有大的工作，SWF框架的核心开发者一部分&lt;/p&gt;

&lt;p&gt;离职去了UBER开发Cadence。没想到沉寂了多年的AWS会在STEP FUNCTIONS&lt;/p&gt;

&lt;p&gt;支持工作流，看来这个千亿规模的市场又快被颠覆了。&lt;/p&gt;

&lt;p&gt;20多年来，工作流都是超大型企业的配置专利，而STEP function的推出&lt;/p&gt;

&lt;p&gt;可以预计，高大上的工作流服务会很快走进很多中小企业工作台并被普及应用。&lt;/p&gt;

&lt;p&gt;回顾一下自己的工作历史：&lt;/p&gt;

&lt;p&gt;从以前的数据中心服务器SA(2006), 到虚拟主机ESX，&lt;/p&gt;

&lt;p&gt;再到OPENSTACK(2010)搭建混合云，&lt;/p&gt;

&lt;p&gt;然后利用K8S(2014)搭建PaaS，现在SERVERLESS,&lt;/p&gt;

&lt;p&gt;计算架构正在发生快速的演进。本文梳理了算力演进历史和未来&lt;/p&gt;

&lt;p&gt;内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从虚拟主机到容器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从容器到unikernel&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数计算的蓬勃发展&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;什么是虚拟计算&#34;&gt;什么是虚拟计算&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./virtulization.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;hypervisor分类&#34;&gt;hypervisor分类&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Type-1 裸机&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;KVM, QEMU, VMWare, Virtualbox&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type-2 托管&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;XenServer， Hyper-v， KVM, ESX, Xen&lt;/p&gt;

&lt;h1 id=&#34;虚拟机的问题&#34;&gt;虚拟机的问题&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;贵&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一台云主机(8G/4Core/500MBps)在2017年的超过6000元/年&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;操作慢&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个普通的镜像在2G左右，再加上JAVA应用，一个镜像需要10G.&lt;/p&gt;

&lt;p&gt;启动，备份非常不便。&lt;/p&gt;

&lt;h1 id=&#34;容器计算&#34;&gt;容器计算&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./container.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;|虚拟机|            容器
|:&amp;mdash;|:&amp;mdash;|:&amp;mdash;|
构件|  完整的操作系统和应用|  微内核和应用
虚拟技术|  硬件虚拟化|  操作系统虚拟化&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./c-vs-v.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;容器计算带来什么好处&#34;&gt;容器计算带来什么好处&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;容器镜像小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;alpine的容量是2M&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器占用的硬件资源更少&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一台PC可以启动上百个容器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器启动快&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般几毫秒可以启动&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器不用备份&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;容器创建只需要一个Dockerfile，容器镜像是只读镜像&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器和微服务器架构，DevOps, CI/CD天然融合&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;容器存在的问题&#34;&gt;容器存在的问题&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;容器共享操作系统内核，具体较低的隔离级别，&lt;/p&gt;

&lt;p&gt;如果内核出问题，其他的容器也会处于风险之中&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何在足够的隔离级别和复杂的高效网络连接权衡&lt;/p&gt;

&lt;h1 id=&#34;容器编排&#34;&gt;容器编排&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;K8S&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;EKS&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SWARM&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MARATHON&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MAGNM&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;FLEET&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用户轻松在计算集群里面部署，管理，扩展基于容器的应用而&lt;/p&gt;

&lt;p&gt;不用关心容器和服务器的绑定，系统扩容等问题&lt;/p&gt;

&lt;h1 id=&#34;容器网络&#34;&gt;容器网络&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;CNM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DOCKER规范，libnetwork实现&lt;/p&gt;

&lt;p&gt;内置的驱动包括none, host, bridge , overlay, MACvlan&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network ls
 NAME                 DRIVER              SCOPE
68343147e103        bridge               bridge              local
5d7df1d8f633        docker_default       bridge              local
d3990aab14a9        host                 host                local
fe4ec77439f4        none                 null                local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./CNM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CNI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;COREOS规范，被K8S, MESOS, CLOUD Foundry采用&lt;/p&gt;

&lt;p&gt;json格式的网络模式定义&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./cni.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;docker的核心组件&#34;&gt;docker的核心组件&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LXC&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;AUFS&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;docker的优势&#34;&gt;DOCKER的优势&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;镜像不可修改&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;部署没有第三方依赖&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注册器简单且容易扩展&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;容易回滚&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对DOCKER的误解：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果学习了docker就不必学其他的系统知识了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每个容器只能有一个进程&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用容器了就不必使用其他的配置管理工具了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;必须使用容器才能达到高效敏捷和一致性状态优势&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;open-containers-initiative&#34;&gt;Open Containers Initiative&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./oci.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;unikernel&#34;&gt;UniKernel&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./UniKernel.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;函数计算的兴起&#34;&gt;函数计算的兴起&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;No server is easier to manage than no-server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;背景：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前端技术演进&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;强大的原生客户/移动客户端让开发者通过调用各种云服务&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;编写大规模互联网应用，替换传统的后台服务&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTTP/S应用接口及基于token的安全认证成为工业标准&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;后台的定制化开发&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于云服务器定制开发&lt;/p&gt;

&lt;h1 id=&#34;serverless-vs-paas&#34;&gt;ServerLess  VS  PaaS&lt;/h1&gt;

&lt;p&gt;PasS可能是ServerLess的一个迭代&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./serverless.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./article.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Step Functions 常见问题</title>
      <link>https://wubigo.com/post/step-functions/</link>
      <pubDate>Wed, 25 Sep 2019 15:22:59 +0800</pubDate>
      
      <guid>https://wubigo.com/post/step-functions/</guid>
      <description>

&lt;h1 id=&#34;aws-step-functions-vs&#34;&gt;AWS Step Functions   VS&lt;/h1&gt;

&lt;p&gt;Adds Support for Nested Workflows&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>宽带服务</title>
      <link>https://wubigo.com/post/start-your-own-isp/</link>
      <pubDate>Mon, 16 Sep 2019 09:39:21 +0800</pubDate>
      
      <guid>https://wubigo.com/post/start-your-own-isp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=20726906&#34; target=&#34;_blank&#34;&gt;https://news.ycombinator.com/item?id=20726906&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=17067144&#34; target=&#34;_blank&#34;&gt;ISP Starter Kit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.wispa.org/Resources/HOW-TO-START-A-WISP&#34; target=&#34;_blank&#34;&gt;http://www.wispa.org/Resources/HOW-TO-START-A-WISP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wireless fiber&lt;/p&gt;

&lt;p&gt;5G mobile broadband&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.huawei.com/en/press-events/news/2019/1/huawei-releases-wireless-fiber-solution&#34; target=&#34;_blank&#34;&gt;https://www.huawei.com/en/press-events/news/2019/1/huawei-releases-wireless-fiber-solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.techdirt.com/articles/20190904/08392642916/colorado-town-offers-1-gbps-60-after-years-battling-comcast.shtml&#34; target=&#34;_blank&#34;&gt;https://www.techdirt.com/articles/20190904/08392642916/colorado-town-offers-1-gbps-60-after-years-battling-comcast.shtml&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Proxy for daemon and client</title>
      <link>https://wubigo.com/post/docker-proxy/</link>
      <pubDate>Fri, 13 Sep 2019 07:07:56 +0800</pubDate>
      
      <guid>https://wubigo.com/post/docker-proxy/</guid>
      <description>

&lt;h1 id=&#34;docker-deamon-proxy&#34;&gt;DOCKER DEAMON PROXY&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;systemd level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;/etc/systemd/system/docker.service.d/https-proxy.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Service]
Environment=&amp;quot;HTTPS_PROXY=http://192.168.1.1:8080/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;service level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;/etc/default/docker&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export http_proxy=&amp;quot;http://127.0.0.1:3128/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;daemon level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;/etc/docker/daemon&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;docker-client-proxy&#34;&gt;DOCKER CLIENT PROXY&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;~/.docker/config.json&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       &amp;quot;proxies&amp;quot;:{
                &amp;quot;default&amp;quot;:{}
        }

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>免费使用公有云服务</title>
      <link>https://wubigo.com/post/use-public-cloud-for-free/</link>
      <pubDate>Thu, 12 Sep 2019 07:46:24 +0800</pubDate>
      
      <guid>https://wubigo.com/post/use-public-cloud-for-free/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;./localstack.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;AWS领先的设计理念和强大的技术生态&lt;/p&gt;

&lt;p&gt;使你身陷其中，学习你要用它，开发你要&lt;/p&gt;

&lt;p&gt;用它，上线还要用它。 一年下来项目还没有&lt;/p&gt;

&lt;p&gt;正式商用，已经有十几万的研发费用。&lt;/p&gt;

&lt;p&gt;今天向你推荐 localstack（与openstack啥关系？私有云+公有云），&lt;/p&gt;

&lt;p&gt;让你使用AWS免费，至少在项目POC或开发测试阶段免费。&lt;/p&gt;

&lt;p&gt;有了它， 你不用再焦急的等待老板审批公有云的&lt;/p&gt;

&lt;p&gt;计算，存储，数据库资源开发申请。&lt;/p&gt;

&lt;p&gt;是不是这个项目听起来很激动？&lt;/p&gt;

&lt;!--
最近正在了解微服务编排相关技术规范，看看AWS Step Functions

如何设计的，localstack正好排上用场
--&gt;

&lt;p&gt;那如何使用localstack呢？&lt;/p&gt;

&lt;h1 id=&#34;安装localstack&#34;&gt;安装localstack&lt;/h1&gt;

&lt;p&gt;localstack是一个非常活跃的正在快速成长中的项目，&lt;/p&gt;

&lt;p&gt;建议通过源代码安装&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载源代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:localstack/localstack.git

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;启用需要使用的AWS服务&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改配置文件，启用你需要使用的AWS服务:ec2,s3,iot,kafka等。&lt;/p&gt;

&lt;p&gt;注意服务的名字必须来自&lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/#available-services&#34; target=&#34;_blank&#34;&gt;服务名字列表&lt;/a&gt;， 否则不识别&lt;/p&gt;

&lt;p&gt;启用服务就是修改下边的配置文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;localstack\docker-compose.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; SERVICES=${SERVICES-ec2,ecs,stepfunctions,iam,lambda,dynamodb,apigateway,s3,sns}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up


localstack_1  | Starting mock S3 (http port 4572)...
localstack_1  | Starting mock SNS (http port 4575)...
localstack_1  | Starting mock IAM (http port 4593)...
localstack_1  | Starting mock API Gateway (http port 4567)...
localstack_1  | Starting mock DynamoDB (http port 4569)...
localstack_1  | Starting mock Lambda service (http port 4574)...
localstack_1  | Starting mock CloudWatch Logs (http port 4586)...
localstack_1  | Starting mock StepFunctions (http port 4585)...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;系统消息显示需要的服务/端口已经启动。&lt;/p&gt;

&lt;p&gt;到目前为至，localstack已经安装完毕。&lt;/p&gt;

&lt;p&gt;下边，我们来验证公有云服务是否可用。&lt;/p&gt;

&lt;h1 id=&#34;安装aws客户端&#34;&gt;安装AWS客户端&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装到虚拟环境&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code\venv&amp;gt;pip install awscli

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以安装到系统环境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配置AWS CLI&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code\venv&amp;gt;aws configure

AWS Access Key ID [None]: any-id-is-ok
AWS Secret Access Key [None]: fake-key
Default region name [local]: local
Default output format [None]:

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;验证服务编排&#34;&gt;验证服务编排&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;试用stepfunctions服务&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面显示stepfunctions服务在4585端口，下面的端口要和&lt;/p&gt;

&lt;p&gt;配置保持一致&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code\venv&amp;gt;aws stepfunctions --endpoint-url http://localhost:8083 list-activities

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建一个HelloWorld工作流&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
(venv) d:\code\venv&amp;gt;aws stepfunctions --endpoint-url http://localhost:8083 create-state-machine --definition &amp;quot;{\&amp;quot;Comment\&amp;quot;: \&amp;quot;A Hello World example of the Amazon States Language using a Pass state\&amp;quot;,\&amp;quot;StartAt\&amp;quot;: \&amp;quot;HelloWorld\&amp;quot;,\&amp;quot;States\&amp;quot;: {\&amp;quot;HelloWorld\&amp;quot;: {\&amp;quot;Type\&amp;quot;: \&amp;quot;Pass\&amp;quot;,\&amp;quot;End\&amp;quot;: true}}}&amp;quot; --name &amp;quot;HelloWorld&amp;quot; --role-arn &amp;quot;arn:aws:iam::012345678901:role/DummyRole&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;显示创建的工作流&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code\venv&amp;gt;aws stepfunctions --endpoint-url http://localhost:8083 list-state-machines
{
&amp;quot;stateMachines&amp;quot;: [
    {
        &amp;quot;creationDate&amp;quot;: 1568199315.809,
        &amp;quot;stateMachineArn&amp;quot;: &amp;quot;arn:aws:states:us-east-1:123456789012:stateMachine:HelloWorld&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;HelloWorld&amp;quot;
    }
]
}


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;工作流已经创建，你可以启动工作流，&lt;/p&gt;

&lt;p&gt;添加Lambda，部署微服务，添加微服务到到工作流，&lt;/p&gt;

&lt;p&gt;所有公有云的计算，存储，API调用，上行宽带费用&lt;/p&gt;

&lt;p&gt;通过使用localstack一切免费。&lt;/p&gt;

&lt;p&gt;赶快加入项目，贡献你的力量&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://localstack.cloud/&#34; target=&#34;_blank&#34;&gt;https://localstack.cloud/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/amazon/aws-stepfunctions-local&#34; target=&#34;_blank&#34;&gt;https://hub.docker.com/r/amazon/aws-stepfunctions-local&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/limits.html&#34; target=&#34;_blank&#34;&gt;https://docs.aws.amazon.com/lambda/latest/dg/limits.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Secucity Micro Segmentation</title>
      <link>https://wubigo.com/post/secucity-micro-segmentation/</link>
      <pubDate>Sun, 26 May 2019 17:26:24 +0800</pubDate>
      
      <guid>https://wubigo.com/post/secucity-micro-segmentation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sdxcentral.com/networking/virtualization/definitions/how-does-micro-segmentation-help-security-explanation/&#34; target=&#34;_blank&#34;&gt;https://www.sdxcentral.com/networking/virtualization/definitions/how-does-micro-segmentation-help-security-explanation/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wireless and Wired Connection Both at a Same Time in Windows</title>
      <link>https://wubigo.com/post/wireless-and-wired-connection-both-at-a-same-time-in-windows/</link>
      <pubDate>Fri, 10 May 2019 16:57:56 +0800</pubDate>
      
      <guid>https://wubigo.com/post/wireless-and-wired-connection-both-at-a-same-time-in-windows/</guid>
      <description>

&lt;h1 id=&#34;give-the-wireless-network-higher-priority-than-the-wired&#34;&gt;give the wireless network higher priority than the wired&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;WIRELESS CONNECTION &amp;gt; &amp;quot;Internet Protocol Version 4 (TCP/IPv4) Properties&amp;quot;
&amp;gt;  advanced TCP/IP setting &amp;gt; Automatic metric
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uncheck it. That will enable a text box named &amp;ldquo;Interface metric&amp;rdquo;. Fill in a number. It needs to be larger than 1 (reserved for loopback) and the number(30) you choose for the wired network.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WIRED CONNECTION &amp;gt; &amp;quot;Internet Protocol Version 4 (TCP/IPv4) Properties&amp;quot;
&amp;gt;  advanced TCP/IP setting &amp;gt; Automatic metric
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again Uncheck &amp;ldquo;Automatic metric&amp;rdquo;, and fill in a number in the &amp;ldquo;Interface metric&amp;rdquo; box. It needs to be larger than 1 but smaller than the number  above (15).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows Application Information Service</title>
      <link>https://wubigo.com/post/windows-application-information-service/</link>
      <pubDate>Mon, 06 May 2019 11:51:54 +0800</pubDate>
      
      <guid>https://wubigo.com/post/windows-application-information-service/</guid>
      <description>&lt;p&gt;AppInfo 启动类型必须是自动或手动，&lt;/p&gt;

&lt;p&gt;否则，msinstaller， services.msc， regedit&lt;/p&gt;

&lt;p&gt;等都会报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The Service command cannot be started,
either because it is disabled or because
it has no enabled devices associated with it
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;AppInfo	

svchost.exe	

Facilitates the running of interactive applications
 with additional administrative privileges.	

Users will be unable to launch applications with the
 additional administrative privileges they may require
 to perform desired user tasks.  These tools include regedit.

Although safe to disable, this is not recommended since
 you need to boot into safe mode to enable again.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>微服务认证和授权（MAA）指南</title>
      <link>https://wubigo.com/post/microservices-authentication-and-authorization/</link>
      <pubDate>Sun, 28 Apr 2019 17:08:07 +0800</pubDate>
      
      <guid>https://wubigo.com/post/microservices-authentication-and-authorization/</guid>
      <description>

&lt;p&gt;微服务认证和授权有很多方案，&lt;/p&gt;

&lt;p&gt;这里比较各种主流方案的优缺点，&lt;/p&gt;

&lt;p&gt;为你的业务系统选择MAA方案提供指南&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方案&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;优点&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;分布式会话管理&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;简单，成熟，服务器统一管理&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;扩展性比较差&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;客户令牌&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;单点登录&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;API网关令牌管理&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;第三方应用授权&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SSL/TLS 双向认证&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;方案&#34;&gt;方案&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;分布式会话管理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;会话信息由服务器存储&lt;/p&gt;

&lt;p&gt;实现方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sticky session&lt;/li&gt;
&lt;li&gt;Session replication&lt;/li&gt;
&lt;li&gt;Centralized session storage&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;客户令牌&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;令牌由客户持有&lt;/p&gt;

&lt;p&gt;JWT: 头，负载和签名&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;头&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;,
&amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;负载&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ 
&amp;quot;id&amp;quot;: 123, 
&amp;quot;name&amp;quot;: &amp;quot;hi tico&amp;quot;,
&amp;quot;is_admin&amp;quot;: true,
&amp;quot;expire&amp;quot;: 1558213420 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;签名&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HMACSHA256(
base64UrlEncode(header) + &amp;quot;.&amp;quot; +
base64UrlEncode(payload),
secret
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;./jwt.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单点登录&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;API网关令牌管理&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;./jwt-api-gateway.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第三方应用授权&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;API 令牌&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例如github的API个人令牌&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;OAUTH&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;./JWT-OAUTH.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Someone may wonder why an Authorization Code is used to request Access Token, rather than returning the Access Token to the client directly from the authorization server. The reason why OAuth is designed in this way is to pass through the user agent (browser) during the process of redirecting to the client’s Callback URL. If the Access Token is passed directly, there is a risk of being stolen.&lt;/p&gt;

&lt;p&gt;By using the authorization code, the client directly interacts with the authorization server when applying for the access token, and the authorization server also authorize the client when processing the client’s token request, so it’s prevent others from forging the client’s identity to use the authentication code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSL/TLS 双向认证&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如istio citadel私有证书中心&lt;/p&gt;

&lt;p&gt;[1]. &lt;a href=&#34;https://medium.com/tech-tajawal/microservice-authentication-and-authorization-solutions-e0e5e74b248a&#34; target=&#34;_blank&#34;&gt;https://medium.com/tech-tajawal/microservice-authentication-and-authorization-solutions-e0e5e74b248a&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux删除Python3.5</title>
      <link>https://wubigo.com/post/linux-python3.5-remove/</link>
      <pubDate>Sun, 24 Mar 2019 14:04:09 +0800</pubDate>
      
      <guid>https://wubigo.com/post/linux-python3.5-remove/</guid>
      <description>&lt;p&gt;之前一直用pycharm,今天把code升级到1.3.2的时候，
突然提示我安装python扩展，决定试试。
结果发现python的解释器设置有问题，
总是设置为系统的解释器，
而虚拟环境的解释器不起作用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt remove --purge python3.5
reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果ubuntu桌面启动不了。好多应用程序例如chrome，virtualbox都消失了，
造成了很大的麻烦。&lt;/p&gt;

&lt;p&gt;Ctrl+Alt+F1进入虚拟控制台登录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt install python3.5
apt install ubuntu-desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新安装chrome和virtualbox&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /etc/apt/sources.list.d
sudo mv google-chrome.list.save google-chrome.list
apt update
apt install google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>K8s高效应用开发工具集</title>
      <link>https://wubigo.com/post/k8s-app-development-toolbox/</link>
      <pubDate>Sun, 24 Mar 2019 08:01:56 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-app-development-toolbox/</guid>
      <description>

&lt;h1 id=&#34;本地流线型开发&#34;&gt;本地流线型开发&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wubigo.com/post/k8s-development-streamline/&#34;&gt;本地流线型开发&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;集成开发-测试部署&#34;&gt;集成开发，测试部署&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://wubigo.com/post/k8s-ide-tool&#34;&gt;IDE&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>K8s Pod Command Override</title>
      <link>https://wubigo.com/post/k8s-pod-command-override/</link>
      <pubDate>Mon, 18 Mar 2019 14:49:10 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-pod-command-override/</guid>
      <description>

&lt;p&gt;K8S POD Command Override OCR&lt;/p&gt;

&lt;h1 id=&#34;docker-entrypoint-vs-k8s-command&#34;&gt;docker Entrypoint vs k8s command&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;docker&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;k8s&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;entry&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ENTRYPOINT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;command&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;arguments&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CMD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;args&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;k8s command and args override the default OCR Entrypoint and Cmd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine:3.8
RUN apk add --no-cache curl ethtool &amp;amp;&amp;amp; rm -rf /var/cache/apk/*
CMD [&amp;quot;--version&amp;quot;]
ENTRYPOINT [&amp;quot;curl&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cmd-override-pod.yaml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: command-override
  labels:
    purpose: override-command
spec:
  containers:
  - name: command-override-container
    image: bigo/curl:v1
    command: [&amp;quot;curl&amp;quot;]
    args: [&amp;quot;--help&amp;quot;]
  restartPolicy: Never
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;docker run -it bigo/curl:v1
curl 7.61.1 (x86_64-alpine-linux-musl) libcurl/7.61.1 LibreSSL/2.0.0 zlib/1.2.11 libssh2/1.8.0 nghttp2/1.32.0
Release-Date: 2018-09-05
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;kubectl apply -f cmd-override-pod.yaml
kubectl logs command-override

Usage: curl [options...] &amp;lt;url&amp;gt;
     --abstract-unix-socket &amp;lt;path&amp;gt; Connect via abstract Unix domain socket
     --anyauth       Pick any authentication method
 -a, --append        Append to target file when uploading

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>K8s Logging</title>
      <link>https://wubigo.com/post/k8s-logging/</link>
      <pubDate>Sun, 17 Mar 2019 10:25:07 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-logging/</guid>
      <description>

&lt;h1 id=&#34;node-level-logging&#34;&gt;Node-level Logging&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;System component logs&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;RUN IN CONTAINER(Y/N)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Systemd(W/WO)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;LOGGER LOCATION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;kubelet and container runtime&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W/O&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/var/log&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;kubelet and container runtime&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;W&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;journald&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;scheduler&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/var/log&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;kube-proxy&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/var/log&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;/var/lib/kubelet/pods/&amp;lt;PodUID&amp;gt;/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/var/log/pods/&amp;lt;PodUID&amp;gt;/&amp;lt;container_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls -l /var/log/pods/&amp;lt;PodUID&amp;gt;/&amp;lt;container_name&amp;gt;/
lrwxrwxrwx 1 root root 165 3月  30 06:52 0.log -&amp;gt; /var/lib/docker/containers/e74eafc4b3f0cfe2e4e0462c93101244414eb3048732f409c29cc54527b4a021/e74eafc4b3f0cfe2e4e0462c93101244414eb3048732f409c29cc54527b4a021-json.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;cluster-level-logging&#34;&gt;Cluster-level logging&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use a node-level logging agent that runs on every node.&lt;/li&gt;
&lt;li&gt;Include a dedicated sidecar container for logging in an application pod.&lt;/li&gt;
&lt;li&gt;Push logs directly to a backend from within an application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体实现&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wubigo.com/post/k8s-logging-efk/&#34;&gt;EFK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>K8S CORE DEVELOPMENT</title>
      <link>https://wubigo.com/post/k8s-core-development/</link>
      <pubDate>Mon, 04 Mar 2019 11:13:20 +0800</pubDate>
      
      <guid>https://wubigo.com/post/k8s-core-development/</guid>
      <description>

&lt;pre&gt;&lt;code&gt;git clone git@github.com:wubigo/kubernetes.git
git remote add upstream https://github.com/kubernetes/kubernetes.git
git fetch --all
git checkout tags/v1.13.3 -b v1.13.3 
git branch -av|grep 1.13
* fix-1.13                            4807084f79 Add/Update CHANGELOG-1.13.md for v1.13.2.
  remotes/origin/release-1.13         4807084f79 Add/Update CHANGELOG-1.13.md for v1.13.2.

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;管理pod&#34;&gt;管理POD&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;func (kl *Kubelet) syncPod(o syncPodOptions) error {
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>通过SDK操纵公有云</title>
      <link>https://wubigo.com/post/dev-on-tencent-cloud-sdk-in-go/</link>
      <pubDate>Sun, 03 Mar 2019 20:24:49 +0800</pubDate>
      
      <guid>https://wubigo.com/post/dev-on-tencent-cloud-sdk-in-go/</guid>
      <description>

&lt;p&gt;基于腾讯云Go SDK开发&lt;/p&gt;

&lt;h1 id=&#34;下载开发工具集&#34;&gt;下载开发工具集&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;go get -u github.com/tencentcloud/tencentcloud-sdk-go
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;为集群准备cvm&#34;&gt;为集群准备CVM&lt;/h1&gt;

&lt;p&gt;从本地开发集群K8S读取安全凭证secretId和secretKey配置信息，
然后把安全凭证传送给SDK客户端&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;secretId, secretKey:= K8SClient.Secrets(&amp;quot;namespace=tencent&amp;quot;).Get(&amp;quot;cloud-pass&amp;quot;)
credential := CloudCommon.NewCredential(&amp;quot;secretId&amp;quot;, &amp;quot;secretKey&amp;quot;)
client, _ := cvm.NewClient(credential, regions.Beijing)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;request := cvm.NewAllocateHostsRequest()
request.FromJsonString(K8SClient.Configs(&amp;quot;namespace=tencent&amp;quot;).Get(&amp;quot;K8S-TENCENT-PROD&amp;quot;))
response, err := client.AllocateHosts(request)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;通过ansible在cvm搭建k8s集群&#34;&gt;通过ANSIBLE在CVM搭建K8S集群&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Ansible.Hosts().Get(response.ToJsonString())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用ANSIBLE开始在CVM部署K8S集群&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
