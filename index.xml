<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOFTCORE on SOFTCORE</title>
    <link>https://wubigo.com/</link>
    <description>Recent content in SOFTCORE on SOFTCORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Nov 2019 16:46:13 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Aws Get Sqs Notification on S3 Object Creation</title>
      <link>https://wubigo.com/post/aws-get-sqs-notification-on-s3-object-creation/</link>
      <pubDate>Tue, 19 Nov 2019 16:46:13 +0800</pubDate>
      
      <guid>https://wubigo.com/post/aws-get-sqs-notification-on-s3-object-creation/</guid>
      <description>

&lt;h1 id=&#34;get-s3-object-creation-notification&#34;&gt;get s3 object creation notification&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;create queue&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;awslocal s3 mb s3://localstack
awslocal sqs create-queue --queue-name localstack
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;get  queue arn&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; awslocal sqs get-queue-attributes --queue-url http://localhost:4576/queue/march --attribute-names All
{
    &amp;quot;Attributes&amp;quot;: {
        &amp;quot;ApproximateNumberOfMessagesNotVisible&amp;quot;: &amp;quot;0&amp;quot;,
        &amp;quot;ApproximateNumberOfMessagesDelayed&amp;quot;: &amp;quot;0&amp;quot;,
        &amp;quot;CreatedTimestamp&amp;quot;: &amp;quot;1574152022&amp;quot;,
        &amp;quot;ApproximateNumberOfMessages&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;ReceiveMessageWaitTimeSeconds&amp;quot;: &amp;quot;0&amp;quot;,
        &amp;quot;DelaySeconds&amp;quot;: &amp;quot;0&amp;quot;,
        &amp;quot;VisibilityTimeout&amp;quot;: &amp;quot;30&amp;quot;,
        &amp;quot;LastModifiedTimestamp&amp;quot;: &amp;quot;1574152022&amp;quot;,
        &amp;quot;QueueArn&amp;quot;: &amp;quot;arn:aws:sqs:us-east-1:000000000000:localstack&amp;quot;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;create  s3 notification config&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cat notification.json
{
  &amp;quot;QueueConfigurations&amp;quot;: [
    {
      &amp;quot;QueueArn&amp;quot;: &amp;quot;arn:aws:sqs:local:000000000000:localstack&amp;quot;,
      &amp;quot;Events&amp;quot;: [
          &amp;quot;s3:ObjectCreated:*&amp;quot;
        ]
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;make notification effect&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;awslocal s3api put-bucket-notification-configuration --bucket localstack --notification-configuration file://notification.json
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;upload object to s3&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;awslocal s3 cp notification.json s3://localstack
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;get notification&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;awslocal sqs receive-message --queue-url http://localhost:4576/queue/localstack
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Aws Log</title>
      <link>https://wubigo.com/post/aws-log/</link>
      <pubDate>Sat, 16 Nov 2019 16:00:25 +0800</pubDate>
      
      <guid>https://wubigo.com/post/aws-log/</guid>
      <description>&lt;p&gt;AWS Lambda
By default, all native logs within a Lambda function are stored in the function execution result within Lambda. Additionally, if you would like to review log information immediately after executing a function, invoking the Lambda function with the LogType parameter will retrieve the last 4KB of log data generated by the function. This information is returned in the x-amz-log-results header in the HTTP response.&lt;/p&gt;

&lt;p&gt;While these methods are great ways to test and debug issues associated with individual function calls, they do not do much by way of analysis or alerting. Thankfully, the log data that is stored in the Lambda function result is also stored in CloudWatch, Amazon’s log aggregation service. To access the CloudWatch logs for a given function, you will need to know the log group and log stream names, which can be retrieved by adding them to the function call logs and retrieving them in the x-amz-log-results response as mentioned above. As an example, this context can be retrieved and logged in Node.js like so:&lt;/p&gt;

&lt;p&gt;console.log(‘logGroupName =’, context.log_group_name);
console.log(‘logStreamName =’, context.log_stream_name);&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aws Serverless Localstack Examples</title>
      <link>https://wubigo.com/post/aws-serverless-localstack-examples/</link>
      <pubDate>Sat, 16 Nov 2019 07:25:19 +0800</pubDate>
      
      <guid>https://wubigo.com/post/aws-serverless-localstack-examples/</guid>
      <description>&lt;pre&gt;&lt;code&gt;serverless install -u  https://github.com/serverless/examples/tree/master/aws-node-upload-to-s3-and-postprocess  -n aws-node-upload-to-s3-and-postprocess

sls deploy -s local

awslocal logs describe-log-groups

{
    &amp;quot;logGroups&amp;quot;: [
        {
            &amp;quot;arn&amp;quot;: &amp;quot;arn:aws:logs:us-east-1:1:log-group:/aws/lambda/uload-local-postprocess&amp;quot;,
            &amp;quot;creationTime&amp;quot;: 1573867924377.624,
            &amp;quot;metricFilterCount&amp;quot;: 0,
            &amp;quot;logGroupName&amp;quot;: &amp;quot;/aws/lambda/upload-local-postprocess&amp;quot;,
            &amp;quot;storedBytes&amp;quot;: 0
        }
    ]
}


awslocal logs describe-log-streams --log-group-name /aws/lambda/uload-local-postprocess
{
    &amp;quot;logStreams&amp;quot;: []
}


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;serverless install -u https://github.com/serverless/examples/tree/master/aws-node-s3-file-replicator -n aws-node-s3-file-replicator


sls deploy -s local


awslocal  s3api get-bucket-notification-configuration --bucket bbbb

awslocal s3api get-bucket-acl --bucket output-bucket-12345

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lambda_function.py&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import json

def my_handler(event, context):
    print(&amp;quot;Received event: &amp;quot; + json.dumps(event, indent=2))
    message = &#39;Hello {} {}!&#39;.format(event[&#39;first_name&#39;], event[&#39;last_name&#39;])
    return {
        &#39;message&#39;: message
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Aws Localstack Serverless</title>
      <link>https://wubigo.com/post/aws-localstack-serverless/</link>
      <pubDate>Fri, 15 Nov 2019 15:39:37 +0800</pubDate>
      
      <guid>https://wubigo.com/post/aws-localstack-serverless/</guid>
      <description>

&lt;h1 id=&#34;install-nodejs&#34;&gt;install nodejs&lt;/h1&gt;

&lt;h1 id=&#34;install-serverless&#34;&gt;install serverless&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;npm install -g serverless

npm install serverless-localstack
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;check serverless version&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;serverless -v

Framework Core: 1.57.0
Plugin: 3.2.3
SDK: 2.2.1
Components Core: 1.1.2
Components CLI: 1.4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;create-serverless-function&#34;&gt;create serverless function&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;
serverless create --template aws-nodejs --path my-service

cd my-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;serverless.yml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: ping
          method: get
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;plugins:
 - serverless-localstack
custom:
  localstack:
    debug: true
    stages:
      - local
      - dev
    host: http://localhost
    endpoints:
      S3: http://localhost:4572
      DynamoDB: http://localhost:4570
      CloudFormation: http://localhost:4581
      Elasticsearch: http://localhost:4571
      ES: http://localhost:4578
      SNS: http://localhost:4575
      SQS: http://localhost:4576
      Lambda: http://localhost:4574
      Kinesis: http://localhost:4568
      APIGateway: http://localhost:4567
      CloudWatch: http://localhost:4582
      CloudWatchLogs: http://localhost:4586
      CloudWatchEvents: http://localhost:4587
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deploy&#34;&gt;deploy&lt;/h1&gt;

&lt;p&gt;redeploy if all Functions, Events or Resources&lt;/p&gt;

&lt;p&gt;in serverless.yml changed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;serverless deploy --verbose --stage local




Serverless: Using serverless-localstack
Serverless: Reconfiguring service apigateway to use http://localhost:4567
Serverless: Reconfiguring service cloudformation to use http://localhost:4581
Serverless: Reconfiguring service cloudwatch to use http://localhost:4582
Serverless: Reconfiguring service lambda to use http://localhost:4574
Serverless: Reconfiguring service dynamodb to use http://localhost:4569
Serverless: Reconfiguring service kinesis to use http://localhost:4568
Serverless: Reconfiguring service route53 to use http://localhost:4580
Serverless: Reconfiguring service firehose to use http://localhost:4573
Serverless: Reconfiguring service stepfunctions to use http://localhost:4585
Serverless: Reconfiguring service es to use http://localhost:4578
Serverless: Reconfiguring service s3 to use http://localhost:4572
Serverless: Reconfiguring service ses to use http://localhost:4579
Serverless: Reconfiguring service sns to use http://localhost:4575
Serverless: Reconfiguring service sqs to use http://localhost:4576
Serverless: Reconfiguring service sts to use http://localhost:4592
Serverless: Reconfiguring service iam to use http://localhost:4593
Serverless: Reconfiguring service ssm to use http://localhost:4583
Serverless: Reconfiguring service rds to use http://localhost:4594
Serverless: Reconfiguring service ec2 to use http://localhost:4597
Serverless: Reconfiguring service elasticache to use http://localhost:4598
Serverless: Reconfiguring service kms to use http://localhost:4599
Serverless: Reconfiguring service secretsmanager to use http://localhost:4584
Serverless: Reconfiguring service logs to use http://localhost:4586
Serverless: Reconfiguring service cloudwatchlogs to use http://localhost:4586
Serverless: Reconfiguring service iot to use http://localhost:4589
Serverless: Reconfiguring service cognito-idp to use http://localhost:4590
Serverless: Reconfiguring service cognito-identity to use http://localhost:4591
Serverless: Reconfiguring service ecs to use http://localhost:4601
Serverless: Reconfiguring service eks to use http://localhost:4602
Serverless: Reconfiguring service xray to use http://localhost:4603
Serverless: Reconfiguring service appsync to use http://localhost:4605
Serverless: Reconfiguring service cloudfront to use http://localhost:4606
Serverless: Reconfiguring service athena to use http://localhost:4607
Serverless: Reconfiguring service S3 to use http://localhost:4572
Serverless: Reconfiguring service DynamoDB to use http://localhost:4570
Serverless: Reconfiguring service CloudFormation to use http://localhost:4581
Serverless: Reconfiguring service Elasticsearch to use http://localhost:4571
Serverless: Reconfiguring service ES to use http://localhost:4578
Serverless: Reconfiguring service SNS to use http://localhost:4575
Serverless: Reconfiguring service SQS to use http://localhost:4576
Serverless: Reconfiguring service Lambda to use http://localhost:4574
Serverless: Reconfiguring service Kinesis to use http://localhost:4568
Serverless: config.options_stage: local
Serverless: serverless.service.custom.stage: undefined
Serverless: serverless.service.provider.stage: dev
Serverless: config.stage: local
Serverless: Packaging service...
Serverless: Excluding development dependencies...
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
CloudFormation - CREATE_COMPLETE - AWS::CloudFormation::Stack - my-service-local
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading artifacts...
Serverless: Uploading service my-service.zip file to S3 (389 B)...
Serverless: Validating template...
Serverless: Skipping template validation: Unsupported in Localstack
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
CloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - my-service-local
Serverless: Stack update finished...
Service Information
service: my-service
stage: local
region: us-east-1
stack: my-service-local
resources: 11
api keys:
  None
endpoints:
  GET - http://localhost:4567/restapis/gnz8rtc0xd/local/_user_request_/ping
functions:
  hello: my-service-local-hello
layers:
  None

Stack Outputs
ServerlessDeploymentBucketName: my-service-local-ServerlessDeploymentBucket-01EGLIMU6EYB
HelloLambdaFunctionQualifiedArn: HelloLambdaVersionssJzcvFmzKtAcczGFSyyYtxtSzfXFRBYUf4ZEfoXes
ServiceEndpoint: https://gnz8rtc0xd.execute-api.us-east-1.amazonaws.com/local

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;debug-sls&#34;&gt;debug sls&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;SLS_DEBUG=*  sls deploy -s local
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;test-function&#34;&gt;test function&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;with serverless&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;serverless invoke local -f hello -l
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;with curl&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:4567/restapis/gnz8rtc0xd/local/_user_request_/ping
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deploy-function-to-localstack&#34;&gt;deploy function to localstack&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;serverless deploy function -f hello  -v --stage local
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;serverless invoke local -f hello -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;serverless-localstack-issue&#34;&gt;serverless-localstack issue&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;service name has to be less than 5 character(the deployment bucket name gets truncated at 63 characters)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, Serverless creates a bucket with a generated name like&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;service name&gt;-&lt;stage&gt;-serverlessdeploymentbuck-1x6jug5lzfnl7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;to store your service&amp;rsquo;s stack state&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/MikeSouza/serverless-deployment-bucket&#34; target=&#34;_blank&#34;&gt;https://github.com/MikeSouza/serverless-deployment-bucket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/localstack/serverless-localstack/issues/30&#34; target=&#34;_blank&#34;&gt;https://github.com/localstack/serverless-localstack/issues/30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;check the buckets after deployment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awslocal s3 ls
2006-02-03 08:45:09 my-service-local-ServerlessDeploymentBucket-JBV56BIWWO4T
2006-02-03 08:45:09 simple-point-local-ServerlessDeploymentBucket-NI6J3QAYAJ55
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JAVA这两年</title>
      <link>https://wubigo.com/post/java-last-2-years/</link>
      <pubDate>Tue, 29 Oct 2019 10:17:03 +0800</pubDate>
      
      <guid>https://wubigo.com/post/java-last-2-years/</guid>
      <description>

&lt;p&gt;JAVA 这两年最重要的项目就是GRAAL的正式版发布。&lt;/p&gt;

&lt;p&gt;GRAAL能做什么？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;让解释性程序例如JAVA, JS 运行的更快: AOT编译为宿主二进制可执行文件,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;启动时间小于100ms， 像C, GO, ERLANG一样的执行速度&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更低的内存占用：只占用传统的JVM应用20%的内存&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;听起来是不是该项目为函数计算做准备的？&lt;/p&gt;

&lt;p&gt;是，但不完全是。&lt;/p&gt;

&lt;p&gt;GRAAL的官方目标是提供一个统一的虚拟机执行平台，支持如下运行环境：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScrip&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;JVM 语言（Java, Scala, Groovy, Kotlin, Clojure）&lt;/li&gt;
&lt;li&gt;LLVM语言 (C , C++)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;而且不同语言之间零成本互相调用&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;wget https://github.com/oracle/graal/releases/download/vm-19.2.1/graalvm-ce-linux-amd64-19.2.1.tar.gz

tar zxvf graalvm-ce-linux-amd64-19.2.1.tar.gz
export PATH=$PATH:$GRAAL_HOME/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;检查&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;js --version
GraalVM JavaScript (GraalVM CE Native 19.2.1)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;安装native-image&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;gu install native-image
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;gu available
Downloading: Component catalog from www.graalvm.org
ComponentId              Version             Component name      Origin
--------------------------------------------------------------------------------
llvm-toolchain           19.2.1              LLVM.org toolchain  github.com
native-image             19.2.1              Native Image        github.com
python                   19.2.1              Graal.Python        github.com
R                        19.2.1              FastR               github.com
ruby                     19.2.1              TruffleRuby         github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;使用polyglot-shell&#34;&gt;使用Polyglot Shell&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;polyglot --jvm --shell
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;创建java编写的可执行二进制文件&#34;&gt;创建JAVA编写的可执行二进制文件&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;安装glibc-devel, zlib-devel (头文件C库 and zlib) 和 gcc&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libz-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;HelloWorld.java&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HelloWorld {
   public static void main(String... args) {
      System.out.println(&amp;quot;Hello World&amp;quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;javac HelloWorld.java
native-image -cp . HelloWorld

Build on Server(pid: 20375, port: 45977)
[helloworld:20375]    classlist:     199.03 ms
[helloworld:20375]        (cap):   1,866.60 ms
[helloworld:20375]        setup:   5,938.57 ms
[helloworld:20375]   (typeflow):  17,532.76 ms
[helloworld:20375]    (objects):   8,477.10 ms
[helloworld:20375]   (features):   2,365.65 ms
[helloworld:20375]     analysis:  28,469.52 ms
[helloworld:20375]     (clinit):     861.90 ms
[helloworld:20375]     universe:   2,785.89 ms
[helloworld:20375]      (parse):   9,430.36 ms
[helloworld:20375]     (inline):   1,623.19 ms
[helloworld:20375]    (compile):  11,158.60 ms
[helloworld:20375]      compile:  22,588.75 ms
[helloworld:20375]        image:     687.25 ms
[helloworld:20375]        write:   1,153.04 ms
[helloworld:20375]      [total]:  62,321.01 ms

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;执行&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;./helloworld
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;部署到容器&#34;&gt;部署到容器&lt;/h1&gt;

&lt;h1 id=&#34;微服务&#34;&gt;微服务&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://sparkjava.com/&#34; target=&#34;_blank&#34;&gt;http://sparkjava.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://quarkus.io/get-started/&#34; target=&#34;_blank&#34;&gt;https://quarkus.io/get-started/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-framework/wiki/GraalVM-native-image-support&#34; target=&#34;_blank&#34;&gt;https://github.com/spring-projects/spring-framework/wiki/GraalVM-native-image-support&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://royvanrijn.com/blog/2018/09/part-2-native-microservice-in-graalvm/&#34; target=&#34;_blank&#34;&gt;https://royvanrijn.com/blog/2018/09/part-2-native-microservice-in-graalvm/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>开源的工作流引擎技术演进历史</title>
      <link>https://wubigo.com/post/digital-evolution-of-open-source-business-process-management/</link>
      <pubDate>Sun, 27 Oct 2019 11:26:02 +0800</pubDate>
      
      <guid>https://wubigo.com/post/digital-evolution-of-open-source-business-process-management/</guid>
      <description>

&lt;h1 id=&#34;第一代&#34;&gt;第一代&lt;/h1&gt;

&lt;p&gt;2003年， jBPM 1.0发布。&lt;/p&gt;

&lt;p&gt;运行环境：J2EE&lt;/p&gt;

&lt;p&gt;过程定义语言：jPDL(当时工作流厂商都有各自的过程定义语言和建模工具)&lt;/p&gt;

&lt;p&gt;当时的主流的技术： applets, Swing桌面和EJB&lt;/p&gt;

&lt;h1 id=&#34;第二代&#34;&gt;第二代&lt;/h1&gt;

&lt;p&gt;2004年，jBPM 2.0发布&lt;/p&gt;

&lt;p&gt;同时jBPM加入JBoss基金会.&lt;/p&gt;

&lt;p&gt;运行环境：任何JAVA环境(POJO实现过程运行时)，不需要应用服务器&lt;/p&gt;

&lt;h1 id=&#34;第三代&#34;&gt;第三代&lt;/h1&gt;

&lt;p&gt;2005年, jBPM 3.0发布，支持BPEL&lt;/p&gt;

&lt;p&gt;过程定义语言：过程虚拟机&lt;/p&gt;

&lt;p&gt;架构： 与二代相比，架构发生了巨大变化。可以操作的业务功能大范围扩展，不仅通&lt;/p&gt;

&lt;p&gt;过JAVA实现状态机，而且支持建模&lt;/p&gt;

&lt;p&gt;HIBERNETE作为持久机制并同时提供会话对象的概念，&lt;/p&gt;

&lt;p&gt;工作流引擎所有的相关性交互都纳入&lt;a href=&#34;https://docs.jboss.org/jbpm/v3.2/javadoc-jpdl/org/jbpm/JbpmContext.html&#34; target=&#34;_blank&#34;&gt;contextual block&lt;/a&gt;范畴&lt;/p&gt;

&lt;p&gt;这为以后的工作流命令设计模式和命令拦截设计模式的广泛应用打下良好的基础&lt;/p&gt;

&lt;h1 id=&#34;第四代&#34;&gt;第四代&lt;/h1&gt;

&lt;p&gt;2009年， jBPM 4.0 alpha版发布.&lt;/p&gt;

&lt;p&gt;过程虚拟机成功工作流引擎的核心。&lt;/p&gt;

&lt;p&gt;过程定义语言：BPMN, jPDL 和 BPEL&lt;/p&gt;

&lt;p&gt;因为团队人员离开并启动Activiti，正式版没能发布。&lt;/p&gt;

&lt;p&gt;主要改进：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无状态的服务API&lt;/li&gt;
&lt;li&gt;运行时和历史数据的分离： 保证运行时持久的性能&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;第五代&#34;&gt;第五代&lt;/h1&gt;

&lt;p&gt;2010年, Activiti 1发布&lt;/p&gt;

&lt;p&gt;改变：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;版权从LGPL转到APACHE.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;过程定义语言：BPMN(唯一)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从性能和扩展性加强PVM&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多租户支持&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;轻量级架构&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;第六代&#34;&gt;第六代&lt;/h1&gt;

&lt;p&gt;2017年，flowable 6.0发布。&lt;/p&gt;

&lt;p&gt;改变：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;过程模型：放弃PVM,使用原生BPMN， 实现真正的动态过程执行和复杂的过程迁移&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据远完全抽象：支持NoSQL&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CMMN支持&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数式工作流&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>心理学家：21世纪最重要的工作技能</title>
      <link>https://wubigo.com/post/no.-1-work-skill-of-the-future/</link>
      <pubDate>Sat, 12 Oct 2019 16:19:59 +0800</pubDate>
      
      <guid>https://wubigo.com/post/no.-1-work-skill-of-the-future/</guid>
      <description>&lt;p&gt;心理学家：21世纪最重要的工作技能&lt;/p&gt;

&lt;p&gt;专注是21世纪最重要的工作技能，&lt;/p&gt;

&lt;p&gt;可是很多人没有意识到这一点。&lt;/p&gt;

&lt;p&gt;1971年的时候心理学家&lt;a href=&#34;https://www0.gsb.columbia.edu/mygsb/faculty/research/pubfiles/5625/dessein_rational.pdf&#34; target=&#34;_blank&#34;&gt;西蒙&lt;/a&gt;就说过：“大量的信息&lt;/p&gt;

&lt;p&gt;意味着另一种东西变得很稀缺：注意力”。 几十年之前这是个事实，&lt;/p&gt;

&lt;p&gt;在21世纪，注意力变的更加珍贵。&lt;/p&gt;

&lt;p&gt;工作环境正在发生快速的变化，在不远的将来，&lt;/p&gt;

&lt;p&gt;在这个世界只存在两种人：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一种注意力被别人完全控制和操纵的人&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一种注意力不可被打扰的人&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;研究人员告诉我们专注和注意力人们创新发展的原材料&lt;/p&gt;

&lt;p&gt;下面是一些常见的工作干扰：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;聊天群&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;会议&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;电话&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;邮件&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;同事&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>函数计算颠覆对象执行环境(像S3对象存储一样)</title>
      <link>https://wubigo.com/post/function-computing-rise-like-s3/</link>
      <pubDate>Fri, 11 Oct 2019 17:39:50 +0800</pubDate>
      
      <guid>https://wubigo.com/post/function-computing-rise-like-s3/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;./uaa-serverless.png&#34; alt=&#34;uaa-on-serverless&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在WSL中使用Docker</title>
      <link>https://wubigo.com/post/docker-within-wsl/</link>
      <pubDate>Tue, 08 Oct 2019 14:21:19 +0800</pubDate>
      
      <guid>https://wubigo.com/post/docker-within-wsl/</guid>
      <description>

&lt;p&gt;在windows中使用docker有多种方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;docker WIN10 desktop&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WSL&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文主要介绍在WSL中使用docker&lt;/p&gt;

&lt;h1 id=&#34;前提条件&#34;&gt;前提条件&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows 10 Version 1803以上(支持cgroups)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ubuntu for WSL 16.0.4 LTS(WSL支持的最新版本)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docker 17.09&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;安装wsl&#34;&gt;安装WSL&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34; target=&#34;_blank&#34;&gt;install WSL&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;安装ubuntu-for-wsl-16-0-4-lts&#34;&gt;安装Ubuntu for WSL 16.0.4 LTS&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-manual&#34; target=&#34;_blank&#34;&gt;install ubuntu in WSL&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;安装docker&#34;&gt;安装DOCKER&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;启动ubuntu in WSL(以管理员身份运行)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;c:\&amp;gt;wsl -d Ubuntu-16.04
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;安装docker&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;quot;
$ sudo apt-get install docker-ce=17.09.0~ce-0~ubuntu
$ sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;启动docker服务&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;/usr/local/sbin/start_docker.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash
sudo cgroupfs-mount
sudo service docker start
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;在系统启动的时候运行docker服务&#34;&gt;在系统启动的时候运行docker服务&lt;/h1&gt;

&lt;p&gt;在&lt;strong&gt;控制面版\管理工具\计划任务&lt;/strong&gt;创建任务&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./task-trigger.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./action.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;操作的参数如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-c &amp;quot;sudo /bin/sh /usr/local/sbin/start_docker.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;备份wsl&#34;&gt;备份WSL&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;在备份前保存并关闭所有的WSL进程，否则正在运行的进程被强行关闭&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c:\&amp;gt;wsl -l
c:\&amp;gt;wsl --export Ubuntu-16.04 Ubuntu-16.wsl.export.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;REF&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/faun/docker-running-seamlessly-in-windows-subsystem-linux-6ef8412377aa&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aws Cloudformation With Localstack</title>
      <link>https://wubigo.com/post/aws-cloudformation-with-localstack/</link>
      <pubDate>Sun, 29 Sep 2019 14:20:42 +0800</pubDate>
      
      <guid>https://wubigo.com/post/aws-cloudformation-with-localstack/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/44547574/create-api-gateway-in-localstack/48682628&#34; target=&#34;_blank&#34;&gt;https://stackoverflow.com/questions/44547574/create-api-gateway-in-localstack/48682628&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/localstack/localstack/issues/632&#34; target=&#34;_blank&#34;&gt;https://github.com/localstack/localstack/issues/632&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS SAM is an extension for the AWS CloudFormation template language that lets you define serverless
applications at a higher level&lt;/p&gt;

&lt;h1 id=&#34;localstack-default-regrion&#34;&gt;localstack default regrion&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;us-east-1&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;create-stack&#34;&gt;create stack&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;file path has to be in file URL format(file:///home/user/&amp;hellip;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;func.yaml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: &#39;2010-09-09&#39;
Description: Simple CloudFormation Test Template
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: test-bucket-1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;aws cloudformation create-stack --stack-name funstack --template-body file:///data/func.yaml --endpoint-url=http://localhost:4581 --region us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;aws cloudformation describe-stacks  --endpoint-url=http://localhost:4581 --region us-east-1


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Aws Lambda With Localstack</title>
      <link>https://wubigo.com/post/aws-lambda-with-localstack/</link>
      <pubDate>Sun, 29 Sep 2019 09:39:28 +0800</pubDate>
      
      <guid>https://wubigo.com/post/aws-lambda-with-localstack/</guid>
      <description>

&lt;h1 id=&#34;create-function&#34;&gt;Create function&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exports.handler = async function(event, context) {
  console.log(&amp;quot;ENVIRONMENT VARIABLES\n&amp;quot; + JSON.stringify(process.env, null, 2))
  console.log(&amp;quot;EVENT\n&amp;quot; + JSON.stringify(event, null, 2))
  return context.logStreamName
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;打包&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;zip function.zip index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;aws lambda create-function --function-name my-function --zip-file fileb://function.zip --handler index.handler --runtime nodejs10.x --role arn:aws:iam::123456789012:role/lambda-cli-role --endpoint-url=http://localhost:4574
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; aws lambda get-function --function-name my-function  --endpoint-url=http://localhost:4574
{
    &amp;quot;Code&amp;quot;: {
        &amp;quot;Location&amp;quot;: &amp;quot;http://localhost:4574/2015-03-31/functions/my-function/code&amp;quot;
    },
    &amp;quot;Configuration&amp;quot;: {
        &amp;quot;TracingConfig&amp;quot;: {
            &amp;quot;Mode&amp;quot;: &amp;quot;PassThrough&amp;quot;
        },
        &amp;quot;Version&amp;quot;: &amp;quot;$LATEST&amp;quot;,
        &amp;quot;CodeSha256&amp;quot;: &amp;quot;3d149vplmMjIEgZuPhQgnFJ+tndL4I9D11GL1qdgT6M=&amp;quot;,
        &amp;quot;FunctionName&amp;quot;: &amp;quot;my-function&amp;quot;,
        &amp;quot;LastModified&amp;quot;: &amp;quot;2019-09-29T01:16:43.752+0000&amp;quot;,
        &amp;quot;RevisionId&amp;quot;: &amp;quot;c79398c9-556b-4ed1-ad72-91332dd1f6e0&amp;quot;,
        &amp;quot;CodeSize&amp;quot;: 322,
        &amp;quot;FunctionArn&amp;quot;: &amp;quot;arn:aws:lambda:us-east-1:000000000000:function:my-function&amp;quot;,
        &amp;quot;Handler&amp;quot;: &amp;quot;index.handler&amp;quot;,
        &amp;quot;Role&amp;quot;: &amp;quot;arn:aws:iam::123456789012:role/lambda-cli-role&amp;quot;,
        &amp;quot;Timeout&amp;quot;: 3,
        &amp;quot;Runtime&amp;quot;: &amp;quot;nodejs10.x&amp;quot;,
        &amp;quot;Description&amp;quot;: &amp;quot;&amp;quot;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;验证调用&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) $aws lambda list-functions --endpoint-url=http://localhost:4574


(venv) $aws lambda invoke --function-name my-function out --log-type Tail --endpoint-url=http://localhost:4574
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;清理&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;aws lambda delete-function --function-name my-function --endpoint-url=http://localhost:4574
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Local Aws Step Function With Local Lambda</title>
      <link>https://wubigo.com/post/aws-step-function-with-local-lambda/</link>
      <pubDate>Thu, 26 Sep 2019 14:43:54 +0800</pubDate>
      
      <guid>https://wubigo.com/post/aws-step-function-with-local-lambda/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;安装AWS CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code\venv&amp;gt;pip install awscli

pip install awscli-local

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;awslocal = aws &amp;ndash;endpoint-url=&lt;a href=&#34;http://localhost:&#34; target=&#34;_blank&#34;&gt;http://localhost:&lt;/a&gt;&lt;port&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以安装到系统环境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置AWS CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code\venv&amp;gt;aws configure

AWS Access Key ID [None]: any-id-is-ok
AWS Secret Access Key [None]: fake-key
Default region name [local]: local
Default output format [None]:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令行自动完成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$which aws_completer
~/code/venv/bin/aws_completer
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
tee ~/.bashrc &amp;lt;&amp;lt;-&#39;EOF&#39;
complete -C &#39;~/code/venv/bin/aws_completer&#39; aws
EOF

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;安装AWS SAM CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code&amp;gt;pip install aws-sam-cli
(venv) d:\code&amp;gt;sam --version
SAM CLI, version 0.22.0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;启动S3&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code&amp;gt;localstack\docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;创建bucket&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code&amp;gt;aws configure get region
local


(venv) d:\code&amp;gt;aws --endpoint-url=http://localhost:4572 s3 mb s3://demo-bucket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;upload a file to bucket&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code&amp;gt;aws --endpoint-url=http://localhost:4572 s3 cp java0.log s3://demo-bucket
(venv) d:\code&amp;gt;aws --endpoint-url=http://localhost:4572 s3 ls s3://demo-bucket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attach an ACL to the bucket so it is readable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4572 s3api put-bucket-acl --bucket demo-bucket --acl public-read
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;list object acl&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; aws --endpoint-url=http://localhost:4572 s3api get-object-acl --bucket demo-bucket --key java0.log
{
    &amp;quot;Owner&amp;quot;: {
        &amp;quot;DisplayName&amp;quot;: &amp;quot;webfile&amp;quot;,
        &amp;quot;ID&amp;quot;: &amp;quot;75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a&amp;quot;
    },
    &amp;quot;Grants&amp;quot;: [
        {
            &amp;quot;Grantee&amp;quot;: {
                &amp;quot;Type&amp;quot;: &amp;quot;CanonicalUser&amp;quot;,
                &amp;quot;ID&amp;quot;: &amp;quot;75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a&amp;quot;
            },
            &amp;quot;Permission&amp;quot;: &amp;quot;FULL_CONTROL&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;set object url and can be downloaded by public&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4572 s3api put-object-acl --bucket demo-bucket --key java0.log  --acl public-read
 
aws --endpoint-url=http://localhost:4572 s3 presign s3://demo-bucket/java0.log

http://localhost:4572/demo-bucket/java0.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;display the names of all S3 buckets (across all regions)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code&amp;gt;aws --endpoint-url=http://localhost:4572 s3api list-buckets --query &amp;quot;Buckets[].Name&amp;quot;

[
    &amp;quot;demo-bucket&amp;quot;
]



aws --endpoint-url=http://localhost:4572 s3api list-objects --bucket demo-bucket
{
    &amp;quot;Contents&amp;quot;: [
        {
            &amp;quot;LastModified&amp;quot;: &amp;quot;2019-09-29T10:17:02.386Z&amp;quot;,
            &amp;quot;ETag&amp;quot;: &amp;quot;\&amp;quot;d41d8cd98f00b204e9800998ecf8427e\&amp;quot;&amp;quot;,
            &amp;quot;StorageClass&amp;quot;: &amp;quot;STANDARD&amp;quot;,
            &amp;quot;Key&amp;quot;: &amp;quot;java0.log&amp;quot;,
            &amp;quot;Owner&amp;quot;: {
                &amp;quot;DisplayName&amp;quot;: &amp;quot;webfile&amp;quot;,
                &amp;quot;ID&amp;quot;: &amp;quot;75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a&amp;quot;
            },
            &amp;quot;Size&amp;quot;: 0
        }
    ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or specified region&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) d:\code&amp;gt;aws --endpoint-url=http://localhost:4572 --region local s3api list-buckets --query &amp;quot;Buckets[].Name&amp;quot;

[
    &amp;quot;demo-bucket&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;下载样例程序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) [code]$sam init --runtime python2.7

[+] Initializing project structure...

Project generated: ./sam-app

Steps you can take next within the project folder
===================================================
[*] Invoke Function: sam local invoke HelloWorldFunction --event event.json
[*] Start API Gateway locally: sam local start-api

Read sam-app/README.md for further instructions

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;本地调用&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;{&amp;quot;message&amp;quot;: &amp;quot;Hey, are you there?&amp;quot; }&#39; | sam local invoke &amp;quot;HelloWorldFunction&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) [sam-app]$ cd sam-app &amp;amp;&amp;amp; sam build

Build Succeeded

Built Artifacts  : .aws-sam/build
Built Template   : .aws-sam/build/template.yaml

Commands you can use next
=========================
[*] Invoke Function: sam local invoke
[*] Package: sam package --s3-bucket &amp;lt;yourbucket&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;启动本地API网关&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;venv) [sam-app]$ sam local start-api

2019-09-27 10:18:10  * Running on http://127.0.0.1:3000/ (Press CTRL+C to quit)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$curl http://127.0.0.1:3000/hello

{&amp;quot;message&amp;quot;: &amp;quot;hello world&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;启动lambda服务&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;(venv) [sam-app]$ sam local start-lambda
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;运行函数计算服务&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;aws --endpoint-url=http://localhost:4585 stepfunctions list-state-machines --region local

{
    &amp;quot;activities&amp;quot;: []
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;aws stepfunctions --endpoint http://localhost:4585 create-state-machine --definition &amp;quot;{\
  \&amp;quot;Comment\&amp;quot;: \&amp;quot;A Hello World example of the Amazon States Language using an AWS Lambda Local function\&amp;quot;,\
  \&amp;quot;StartAt\&amp;quot;: \&amp;quot;HelloWorld\&amp;quot;,\
  \&amp;quot;States\&amp;quot;: {\
    \&amp;quot;HelloWorld\&amp;quot;: {\
      \&amp;quot;Type\&amp;quot;: \&amp;quot;Task\&amp;quot;,\
      \&amp;quot;Resource\&amp;quot;: \&amp;quot;arn:aws:lambda:us-east-1:123456789012:function:HelloWorldFunction\&amp;quot;,\
      \&amp;quot;End\&amp;quot;: true\
    }\
  }\
}\
}}&amp;quot; --name &amp;quot;HelloWorld&amp;quot; --role-arn &amp;quot;arn:aws:iam::012345678901:role/DummyRole&amp;quot; --region local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aws &amp;ndash;endpoint-url=&lt;a href=&#34;http://localhost:4585&#34; target=&#34;_blank&#34;&gt;http://localhost:4585&lt;/a&gt; &amp;ndash;lambda-endpoint &lt;a href=&#34;http://localhost:3001&#34; target=&#34;_blank&#34;&gt;http://localhost:3001&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>虚拟机 -&gt; 容器 -&gt; 函数计算</title>
      <link>https://wubigo.com/post/from-vm-to-container-to-serverless/</link>
      <pubDate>Thu, 26 Sep 2019 07:48:37 +0800</pubDate>
      
      <guid>https://wubigo.com/post/from-vm-to-container-to-serverless/</guid>
      <description>

&lt;p&gt;昨天看到AWS &lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2019/08/aws-step-function-adds-support-for-nested-workflows/&#34; target=&#34;_blank&#34;&gt;STEP FUNCTIONS支持嵌套的工作流&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;，当时就被震惊了。 AWS早些年推出SWF框架提供工作流服务，&lt;/p&gt;

&lt;p&gt;后来工作流服务就没有大的工作，SWF框架的核心开发者一部分&lt;/p&gt;

&lt;p&gt;离职去了UBER开发Cadence。没想到沉寂了多年的AWS会在STEP FUNCTIONS&lt;/p&gt;

&lt;p&gt;支持工作流，看来这个千亿规模的市场又快被颠覆了。&lt;/p&gt;

&lt;p&gt;20多年来，工作流都是超大型企业的配置专利，而STEP function的推出&lt;/p&gt;

&lt;p&gt;可以预计，高大上的工作流服务会很快走进很多中小企业工作台并被普及应用。&lt;/p&gt;

&lt;p&gt;回顾一下自己的工作历史：&lt;/p&gt;

&lt;p&gt;从以前的数据中心服务器SA(2006), 到虚拟主机ESX，&lt;/p&gt;

&lt;p&gt;再到OPENSTACK(2010)搭建混合云，&lt;/p&gt;

&lt;p&gt;然后利用K8S(2014)搭建PaaS，现在SERVERLESS,&lt;/p&gt;

&lt;p&gt;计算架构正在发生快速的演进。本文梳理了算力演进历史和未来&lt;/p&gt;

&lt;p&gt;内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从虚拟主机到容器&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从容器到unikernel&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数计算的蓬勃发展&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;什么是虚拟计算&#34;&gt;什么是虚拟计算&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./virtulization.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;hypervisor分类&#34;&gt;hypervisor分类&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Type-1 裸机&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;KVM, QEMU, VMWare, Virtualbox&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type-2 托管&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;XenServer， Hyper-v， KVM, ESX, Xen&lt;/p&gt;

&lt;h1 id=&#34;虚拟机的问题&#34;&gt;虚拟机的问题&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;贵&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一台云主机(8G/4Core/500MBps)在2017年的超过6000元/年&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;操作慢&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个普通的镜像在2G左右，再加上JAVA应用，一个镜像需要10G.&lt;/p&gt;

&lt;p&gt;启动，备份非常不便。&lt;/p&gt;

&lt;h1 id=&#34;容器计算&#34;&gt;容器计算&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./container.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;|虚拟机|            容器
|:&amp;mdash;|:&amp;mdash;|:&amp;mdash;|
构件|  完整的操作系统和应用|  微内核和应用
虚拟技术|  硬件虚拟化|  操作系统虚拟化&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./c-vs-v.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;容器计算带来什么好处&#34;&gt;容器计算带来什么好处&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;容器镜像小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;alpine的容量是2M&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器占用的硬件资源更少&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一台PC可以启动上百个容器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器启动快&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般几毫秒可以启动&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器不用备份&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;容器创建只需要一个Dockerfile，容器镜像是只读镜像&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;容器和微服务器架构，DevOps, CI/CD天然融合&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;容器存在的问题&#34;&gt;容器存在的问题&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;容器共享操作系统内核，具体较低的隔离级别，&lt;/p&gt;

&lt;p&gt;如果内核出问题，其他的容器也会处于风险之中&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何在足够的隔离级别和复杂的高效网络连接权衡&lt;/p&gt;

&lt;h1 id=&#34;容器编排&#34;&gt;容器编排&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;K8S&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;EKS&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SWARM&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MARATHON&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MAGNM&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;FLEET&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用户轻松在计算集群里面部署，管理，扩展基于容器的应用而&lt;/p&gt;

&lt;p&gt;不用关心容器和服务器的绑定，系统扩容等问题&lt;/p&gt;

&lt;h1 id=&#34;容器网络&#34;&gt;容器网络&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;CNM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DOCKER规范，libnetwork实现&lt;/p&gt;

&lt;p&gt;内置的驱动包括none, host, bridge , overlay, MACvlan&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network ls
 NAME                 DRIVER              SCOPE
68343147e103        bridge               bridge              local
5d7df1d8f633        docker_default       bridge              local
d3990aab14a9        host                 host                local
fe4ec77439f4        none                 null                local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./CNM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CNI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;COREOS规范，被K8S, MESOS, CLOUD Foundry采用&lt;/p&gt;

&lt;p&gt;json格式的网络模式定义&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./cni.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;docker的核心组件&#34;&gt;docker的核心组件&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LXC&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;AUFS&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;docker的优势&#34;&gt;DOCKER的优势&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;镜像不可修改&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;部署没有第三方依赖&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注册器简单且容易扩展&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;容易回滚&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对DOCKER的误解：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果学习了docker就不必学其他的系统知识了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每个容器只能有一个进程&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用容器了就不必使用其他的配置管理工具了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;必须使用容器才能达到高效敏捷和一致性状态优势&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;open-containers-initiative&#34;&gt;Open Containers Initiative&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./oci.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;unikernel&#34;&gt;UniKernel&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;./UniKernel.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;函数计算的兴起&#34;&gt;函数计算的兴起&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;No server is easier to manage than no-server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;背景：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前端技术演进&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;强大的原生客户/移动客户端让开发者通过调用各种云服务&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;编写大规模互联网应用，替换传统的后台服务&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTTP/S应用接口及基于token的安全认证成为工业标准&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;后台的定制化开发&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于云服务器定制开发&lt;/p&gt;

&lt;h1 id=&#34;serverless-vs-paas&#34;&gt;ServerLess  VS  PaaS&lt;/h1&gt;

&lt;p&gt;PasS可能是ServerLess的一个迭代&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./serverless.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./article.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;虚拟机是一种更成熟的技术，更安全&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;容器虚拟化是一个更适合微服务器架构的方案&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;虚拟机和容器并不是互斥而是互补&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数计算是一下个&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Step Functions 常见问题</title>
      <link>https://wubigo.com/post/step-functions/</link>
      <pubDate>Wed, 25 Sep 2019 15:22:59 +0800</pubDate>
      
      <guid>https://wubigo.com/post/step-functions/</guid>
      <description>

&lt;h1 id=&#34;aws-step-functions-vs&#34;&gt;AWS Step Functions   VS&lt;/h1&gt;

&lt;p&gt;Adds Support for Nested Workflows&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>宽带服务</title>
      <link>https://wubigo.com/post/start-your-own-isp/</link>
      <pubDate>Mon, 16 Sep 2019 09:39:21 +0800</pubDate>
      
      <guid>https://wubigo.com/post/start-your-own-isp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=20726906&#34; target=&#34;_blank&#34;&gt;https://news.ycombinator.com/item?id=20726906&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=17067144&#34; target=&#34;_blank&#34;&gt;ISP Starter Kit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.wispa.org/Resources/HOW-TO-START-A-WISP&#34; target=&#34;_blank&#34;&gt;http://www.wispa.org/Resources/HOW-TO-START-A-WISP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wireless fiber&lt;/p&gt;

&lt;p&gt;5G mobile broadband&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.huawei.com/en/press-events/news/2019/1/huawei-releases-wireless-fiber-solution&#34; target=&#34;_blank&#34;&gt;https://www.huawei.com/en/press-events/news/2019/1/huawei-releases-wireless-fiber-solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.techdirt.com/articles/20190904/08392642916/colorado-town-offers-1-gbps-60-after-years-battling-comcast.shtml&#34; target=&#34;_blank&#34;&gt;https://www.techdirt.com/articles/20190904/08392642916/colorado-town-offers-1-gbps-60-after-years-battling-comcast.shtml&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
